---
- name: Install Python dependencies for AWS
  pip:
    name:
      - boto3
      - botocore
    state: present
  become: yes

- name: Create application directory structure
  file:
    path: "{{ app_dir }}"
    state: directory
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    mode: '0755'

# Option 1: Using Jenkins AWS credentials (recommended for CI/CD)
- name: Download application from S3 using Jenkins credentials
  aws_s3:
    bucket: "{{ s3_bucket }}"
    object: "{{ s3_path }}"
    dest: "/tmp/flask_app.tar.gz"
    mode: get
    region: "{{ aws_region }}"
  environment:
    AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
    AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
    AWS_SESSION_TOKEN: "{{ lookup('env', 'AWS_SESSION_TOKEN') | default('') }}"

# OR Option 2: Using IAM instance profile (recommended for production)
- name: Download application from S3 using instance profile
  aws_s3:
    bucket: "{{ s3_bucket }}"
    object: "{{ s3_path }}"
    dest: "/tmp/flask_app.tar.gz"
    mode: get
    region: "{{ aws_region }}"

- name: Extract application
  unarchive:
    src: "/tmp/flask_app.tar.gz"
    dest: "{{ app_dir }}"
    remote_src: yes
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    extra_opts: [--strip-components=1]

- name: Create virtual environment
  pip:
    virtualenv: "{{ venv_path }}"
    requirements: "{{ app_dir }}/requirements.txt"
    virtualenv_command: python3 -m venv

- name: Install Gunicorn
  pip:
    name: gunicorn
    virtualenv: "{{ venv_path }}"

- name: Configure systemd service
  template:
    src: flask-app.service.j2
    dest: /etc/systemd/system/flask-app.service
    owner: root
    group: root
    mode: '0644'
  notify: Restart flask-app