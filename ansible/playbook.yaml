---
- name: Deploy Flask App
  hosts: app_servers
  become: true
  vars:
    app_dir: /opt/flaskapp
    app_user: ec2-user
    s3_bucket: "team12-flask-artifact"
    s3_path: "artifacts/{{ build_number }}/{{ artifact_name }}"
    venv_path: "{{ app_dir }}/venv"

  tasks:
    - name: Validate build number
      fail:
        msg: "Build number is required"
      when: build_number is not defined

    - name: Install system dependencies
      yum:
        name: "{{ item }}"
        state: present
      loop:
        - python3
        - python3-pip
        - sqlite
      tags: packages

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'

    - name: Download artifact from S3
      amazon.aws.aws_s3:
        bucket: "{{ s3_bucket }}"
        object: "{{ s3_path }}"
        dest: "/tmp/{{ artifact_name }}"
        mode: get
      register: download_result
      until: download_result is succeeded
      retries: 3
      delay: 10
      delegate_to: localhost
      become: false

    - name: Verify artifact checksum
      stat:
        path: "/tmp/{{ artifact_name }}.sha256"
      register: checksum_file
      delegate_to: localhost
      become: false

    - name: Validate artifact integrity
      shell: |
        cd /tmp && sha256sum -c "{{ artifact_name }}.sha256"
      when: checksum_file.stat.exists
      delegate_to: localhost
      become: false

    - name: Transfer artifact to target
      copy:
        src: "/tmp/{{ artifact_name }}"
        dest: "/tmp/"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0644'

    - name: Clean previous deployment
      file:
        path: "{{ app_dir }}"
        state: absent
      when: cleanup_previous|default(true)|bool

    - name: Extract application
      unarchive:
        src: "/tmp/{{ artifact_name }}"
        dest: "{{ app_dir }}"
        remote_src: yes
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        extra_opts: [--strip-components=1]

    - name: Create Python virtualenv
      pip:
        requirements: "{{ app_dir }}/requirements.txt"
        virtualenv: "{{ venv_path }}"
        virtualenv_command: python3 -m venv
        state: present
        executable: "{{ venv_path }}/bin/pip"

    - name: Initialize database
      command: >
        sqlite3 "{{ app_dir }}/app/data.db" < "{{ app_dir }}/init_db.sql"
      args:
        creates: "{{ app_dir }}/app/data.db"

    - name: Configure systemd service
      template:
        src: templates/flask-app.service.j2
        dest: /etc/systemd/system/flask-app.service
        owner: root
        group: root
        mode: '0644'
      notify: Restart flask-app

    - name: Reload systemd
      systemd:
        daemon_reload: yes

    - name: Enable application service
      systemd:
        name: flask-app
        enabled: yes
        state: started

  handlers:
    - name: Restart flask-app
      systemd:
        name: flask-app
        state: restarted